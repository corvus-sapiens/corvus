"""Tests for the corvus.misc package."""

import logging
import os
import tempfile
import pytest

from corvus import logs
from corvus import misc


logger = logs.get_colored_logger(scriptname=__file__, level=logging.DEBUG, persist=False)


## ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ==== ##
def test_get_xxhash():
    expected = 'b06272a3'  # generated by the OS tool `xxhsum -H32`
    actual = misc.get_xxhash32("tests/lorem-ipsum.txt")

    assert actual == expected


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_discover_config_from_env(monkeypatch):
    monkeypatch.setenv("TEST_CONFIG", "tests")
    expected = {
        "topicA": {"a": 0},
        "topicB": {"b": 1}
    }
    actual = misc.discover_config(name="test", use_prefix=True, logger=logger)

    assert actual == expected


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_discover_config_from_env_missing(monkeypatch):
    monkeypatch.setenv("TEST_NONE_CONFIG", "tests")

    with pytest.raises(misc.MissingConfigurationFile):
        misc.discover_config(name="test_none", use_prefix=True, logger=logger)


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_discover_config_from_env_malformed(monkeypatch):
    monkeypatch.setenv("TEST_MALFORMED_CONFIG", "tests")

    with pytest.raises(misc.BadConfigurationFile):
        misc.discover_config(name="test_malformed", use_prefix=True, logger=logger)


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_discover_config_from_env_empty(monkeypatch):
    monkeypatch.setenv("TEST_EMPTY_CONFIG", "tests")

    with pytest.raises(misc.BadConfigurationFile):
        misc.discover_config(name="test_empty", use_prefix=True, logger=logger)


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_discover_config_location_use_prefix():
    expected = {
        "topicA": {"a": 0},
        "topicB": {"b": 1}
    }
    actual = misc.discover_config(name="test.extension", use_prefix=True, location="tests", logger=logger)

    assert actual == expected


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_purge_dir_contents():
    with tempfile.TemporaryDirectory() as tmpdir:
        file_path = os.path.join(tmpdir, "test.txt")
        subdir_path = os.path.join(tmpdir, "test-dir")
        symlink_path = os.path.join(tmpdir, "symlink-test.txt")

        open(file_path, "a", encoding="ascii").close()
        os.mkdir(subdir_path)
        os.symlink(file_path, symlink_path)

        count = len([name for name in os.listdir(tmpdir)])
        print(f"Total file count in {tmpdir}: {count}")

        misc.purge_dir_contents(tmpdir)

        expected = 0
        actual = len([name for name in os.listdir(tmpdir)])

    assert actual == expected


def test_purge_dir_contents_no_follow_symlinks() -> None:
    """
    Make sure removing the symlink leaves the source file intact.

    :return None:
    """
    ## Create a file, a subdir, then a symlink to the file in the subdir
    with tempfile.TemporaryDirectory() as tmpdir:
        file_path = os.path.join(tmpdir, "test.txt")
        subdir_path = os.path.join(tmpdir, "test-dir")
        symlink_path = os.path.join(subdir_path, "symlink-test.txt")

        os.mkdir(subdir_path)
        open(file_path, "a", encoding="ascii").close()
        os.symlink(file_path, symlink_path)

        assert os.path.exists(file_path)
        assert os.path.exists(symlink_path)

        ## ...then remove everything (the symlink) in the subdir
        misc.purge_dir_contents(subdir_path)

        ## ...and make sure the file the link was pointing at, still exists
        assert os.path.exists(file_path)


def test_get_bin_version_ok() -> None:
    actual = bool(misc.get_bin_version("/bin/ps", logger=logger))

    assert actual is True


def test_get_bin_version_raises_filenotfounderror() -> None:
    with pytest.raises(FileNotFoundError):
        misc.get_bin_version("/bin/non-existent", logger=logger)


def test_get_bin_version_raises_versionflagnotimplemented() -> None:
    with pytest.raises(misc.VersionFlagNotImplemented):
        misc.get_bin_version("/bin/false", logger=logger)


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_get_file_report_txt():
    expected = misc.FileReport(
        exists=True,
        bytes=2940,
        human="2.94 KB",
        description="ASCII text, with very long lines",
        mime="text/plain",
        created="2021-12-11 17:45:37",
        modified="2021-12-11 17:45:37"
    )

    actual = misc.get_file_report("tests/lorem-ipsum.txt")
    assert expected == actual


## ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ##
def test_get_file_report_non_existent():
    expected = misc.FileReport(
        exists=False,
        bytes=None,
        human=None,
        description=None,
        mime=None,
        created=None,
        modified=None
    )

    actual = misc.get_file_report("non-existent-file.xyz")
    assert expected == actual
